import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:time_tracker_flutter_course/app/sign_in/verify_page.dart';
import 'package:time_tracker_flutter_course/common_widgets/form_submit_button.dart';
import 'package:time_tracker_flutter_course/common_widgets/show_exception_alert_dialog.dart';
import 'package:time_tracker_flutter_course/services/auth.dart';

import 'email_sign_in_change_model.dart';
import 'forgot_password_page.dart';

class EmailSignInFormChangeNotifier extends StatefulWidget {
  const EmailSignInFormChangeNotifier({
    Key? key,
    required this.model,
  }) : super(key: key);

  final EmailSignInChangeModel model;

  static Widget create(BuildContext context) {
    final auth = Provider.of<AuthBase>(
      context,
      listen: false,
    );
    return ChangeNotifierProvider<EmailSignInChangeModel>(
      create: (_) => EmailSignInChangeModel(
        auth: auth,
      ),
      child: Consumer<EmailSignInChangeModel>(
        builder: (_, model, __) => EmailSignInFormChangeNotifier(
          model: model,
        ),
      ),
    );
  }

  @override
  State<EmailSignInFormChangeNotifier> createState() =>
      _EmailSignInFormStatefulState();
}

class _EmailSignInFormStatefulState
    extends State<EmailSignInFormChangeNotifier> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final FocusNode _emailFocusNode = FocusNode();
  final FocusNode _passwordFocusNode = FocusNode();

  EmailSignInChangeModel get model => widget.model;

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _emailFocusNode.dispose();
    _passwordFocusNode.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    try {
      await model.submit();
      Navigator.of(context).pop();
    } on FirebaseAuthException catch (e) {
      showExceptionAlertDialog(
        context,
        exception: e,
        title: 'Sign In Failed',
      );
    }
  }

  Future<void> _submitVerify() async {
    try {
      await model.submitVerify(context);
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => const VerifyPage(),
        ),
      );
    } on FirebaseAuthException catch (e) {
      showExceptionAlertDialog(
        context,
        exception: e,
        title: 'Sign In Failed',
      );
    }
  }

  void _emailEditingComplete() {
    final newFocus = model.emailValidator.isValid(model.email)
        ? _passwordFocusNode
        : _emailFocusNode;
    FocusScope.of(context).requestFocus(newFocus);
  }

  void _toggleFormType() {
    model.toggleFormType();
    _emailController.clear();
    _passwordController.clear();
  }

  List<Widget> _buildChildren() {
    return [
      TextField(
        autocorrect: false,
        controller: _emailController,
        decoration: InputDecoration(
          filled: true,
          fillColor: Colors.grey[100],
          enabled: model.isLoading == false,
          errorText: model.emailErrorText,
          labelText: 'Email',
          hintText: 'test@test.com',
        ),
        focusNode: _emailFocusNode,
        keyboardType: TextInputType.emailAddress,
        onChanged: model.updateEmail,
        onEditingComplete: () => _emailEditingComplete(),
        textInputAction: TextInputAction.next,
      ),
      const SizedBox(
        height: 8.0,
      ),
      TextField(
        controller: _passwordController,
        obscureText: true,
        decoration: InputDecoration(
          filled: true,
          fillColor: Colors.grey[100],
          enabled: model.isLoading == false,
          errorText: model.passwordErrorText,
          labelText: 'Password',
        ),
        focusNode: _passwordFocusNode,
        keyboardType: TextInputType.text,
        onChanged: model.updatePassword,
        onEditingComplete: _submitVerify,
        textInputAction: TextInputAction.done,
      ),
      const SizedBox(
        height: 8.0,
      ),
      FormSubmitButton(
        onPressed: model.canSubmit ? _submitVerify : null,
        color: model.canSubmit
            ? MaterialStateProperty.all(
                Colors.indigo,
              )
            : null,
        text: model.primaryButtonText.toUpperCase(),
      ),
      const SizedBox(
        height: 8.0,
      ),
      TextButton(
        onPressed: !model.isLoading ? _toggleFormType : null,
        child: Text(
          model.secondaryButtonText,
        ),
      ),
      const SizedBox(
        height: 8.0,
      ),
      TextButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const ForgotPasswordPage(),
            ),
          );
        },
        child: Text(model.forgotPasswordText),
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(
        16.0,
      ),
      child: ListView(
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisSize: MainAxisSize.min,
            children: _buildChildren(),
          ),
        ],
      ),
    );
  }
}
